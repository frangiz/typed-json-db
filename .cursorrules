# AI Assistant Rules for typed-json-db

## Code Style Priorities
1. **Readability first** - Clear, self-documenting code
2. **Non-verbose** - Concise but not cryptic
3. **Performance** - Only if it doesn't hurt readability

## Python Guidelines
- Use type hints consistently
- Prefer descriptive variable names over comments
- Keep functions small and focused
- Use dataclasses over dictionaries when structure matters
- Favor composition over inheritance
- Add tests for all code changes

## Project Structure
- Follow existing patterns in the codebase
- Use `uv` for dependency management
- Test coverage is important but don't over-test trivial code
- Use `ruff` for formatting and linting
- **Update README.md** when API or core logic changes - users need current documentation

## Suggestions Style
- Explain *why* not just *what*
- Show concrete examples
- Prioritize maintainability over cleverness
- When optimizing, measure first

## Changelog Rules
**Only update CHANGELOG.md if changes affect package USERS, not internal development.**

### INCLUDE changes like:
- New features, methods, or classes
- Breaking API changes
- Bug fixes that affect functionality
- Performance improvements users will notice
- Security fixes
- Deprecated features

### DO NOT INCLUDE changes like:
- CI/CD configuration (GitHub Actions, etc.)
- Dependabot configuration
- Development tooling changes
- Repository maintenance
- Code formatting or linting changes
- Documentation typos or minor updates
- Test-only changes
- Build system changes that don't affect the public API

## Tools & Commands
- Use `make` commands consistently (check Makefile)
- **Always use `uv run python` instead of direct `python` commands**
- Prefer `uv run` over direct pip/python calls for all Python execution
- Use `uv` for dependency management and package installation
- Use GitHub Actions for CI/CD automation
- Keep workflows simple and reliable
