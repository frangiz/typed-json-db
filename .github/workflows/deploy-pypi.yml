name: Deploy to PyPI on Version Update

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  # Check that CI workflow has passed for this commit
  check-ci-status:
    runs-on: ubuntu-latest
    steps:
    - name: Check CI workflow status
      id: check-ci
      uses: actions/github-script@v7
      with:
        script: |
          const { data: workflowRuns } = await github.rest.actions.listWorkflowRunsForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            workflow_id: 'ci.yml',
            head_sha: context.sha,
            per_page: 1
          });

          if (workflowRuns.total_count === 0) {
            core.setFailed('No CI workflow run found for this commit');
            return;
          }

          const latestRun = workflowRuns.workflow_runs[0];
          console.log(`CI workflow status: ${latestRun.status}, conclusion: ${latestRun.conclusion}`);

          if (latestRun.status !== 'completed') {
            core.setFailed('CI workflow is still running. Please wait for it to complete.');
            return;
          }

          if (latestRun.conclusion !== 'success') {
            core.setFailed(`CI workflow failed with conclusion: ${latestRun.conclusion}`);
            return;
          }

          console.log('✅ CI workflow passed successfully');

  check-and-deploy:
    runs-on: ubuntu-latest
    needs: [check-ci-status]  # Only proceed if CI passes
    permissions:
      id-token: write  # IMPORTANT: mandatory for trusted publishing
      contents: write  # Allow creating releases and tags
    steps:
    - uses: actions/checkout@v5
      with:
        fetch-depth: 0  # Fetch full history for version comparison
    
    - name: Set up Python
      uses: actions/setup-python@v6
      with:
        python-version: '3.13'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build requests packaging
    
    - name: Extract current version
      id: current-version
      run: |
        python -c "
        import tomllib
        with open('pyproject.toml', 'rb') as f:
            data = tomllib.load(f)
        version = data['project']['version']
        package_name = data['project']['name']
        print(f'VERSION={version}')
        print(f'PACKAGE_NAME={package_name}')
        " >> $GITHUB_OUTPUT
    
    - name: Check if version exists on PyPI
      id: pypi-check
      run: |
        PACKAGE_NAME="${{ steps.current-version.outputs.PACKAGE_NAME }}"
        VERSION="${{ steps.current-version.outputs.VERSION }}"
        
        echo "Checking if $PACKAGE_NAME version $VERSION exists on PyPI..."
        
        # Check if this specific version exists on PyPI
        HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "https://pypi.org/pypi/$PACKAGE_NAME/$VERSION/json")
        
        if [ "$HTTP_STATUS" = "404" ]; then
          echo "✅ Version $VERSION not found on PyPI. Proceeding with deployment."
          echo "SHOULD_DEPLOY=true" >> $GITHUB_OUTPUT
        else
          echo "ℹ️ Version $VERSION already exists on PyPI. Skipping deployment."
          echo "SHOULD_DEPLOY=false" >> $GITHUB_OUTPUT
        fi
    
    - name: Build package
      if: steps.pypi-check.outputs.SHOULD_DEPLOY == 'true'
      run: python -m build
    
    - name: Publish to PyPI
      if: steps.pypi-check.outputs.SHOULD_DEPLOY == 'true'
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        verbose: true
    
    - name: Create Git Tag
      if: steps.pypi-check.outputs.SHOULD_DEPLOY == 'true'
      run: |
        VERSION="${{ steps.current-version.outputs.VERSION }}"
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git tag -a "v$VERSION" -m "Release version $VERSION"
        git push origin "v$VERSION"
    
    - name: Create GitHub Release
      if: steps.pypi-check.outputs.SHOULD_DEPLOY == 'true'
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ steps.current-version.outputs.VERSION }}
        release_name: Release v${{ steps.current-version.outputs.VERSION }}
        body: |
          ## 🚀 Release v${{ steps.current-version.outputs.VERSION }}
          
          This release was automatically created and deployed to PyPI when the version was updated in `pyproject.toml`.
          
          ### 📦 Installation
          ```bash
          pip install typed-json-db==${{ steps.current-version.outputs.VERSION }}
          ```
          
          ### 📋 Changes
          See the [CHANGELOG.md](https://github.com/${{ github.repository }}/blob/main/CHANGELOG.md) and [commit history](https://github.com/${{ github.repository }}/commits/v${{ steps.current-version.outputs.VERSION }}) for detailed changes in this release.
        draft: false
        prerelease: false
